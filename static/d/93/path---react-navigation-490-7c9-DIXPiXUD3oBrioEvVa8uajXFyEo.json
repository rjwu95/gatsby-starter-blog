{"data":{"markdownRemark":{"html":"<p>react native를 통해 모바일 어플리케이션을 만들면서 react native app 화면전환에 react navigation이 가장 적합하다는 것을 깨달았고, navigation을 사용하면서 동작하는 원리에 대해 연구해봤다. React navigation을 통한 화면전환과 구성에 대해 이야기 해보자.</p>\n<h3>Naviagator</h3>\n<p>먼저 react navigation에 있는 navigator라는 개념 먼저 얘기해보려 한다.\nnavigator는 다음 그림과 같다.</p>\n<img src=\"https://s3.ap-northeast-2.amazonaws.com/gun-blog-image/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%2C%202019-03-29%2017-08-35.png?response-content-disposition=inline&X-Amz-Security-Token=AgoGb3JpZ2luEPT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDmFwLW5vcnRoZWFzdC0yIoACfZ4cKDxxyXvlUXeV%2BRyvhd6b%2BdLKVTq5rDa%2FCLridNKy0Ze3pjatqMnKpYPyN3wYPvzJ%2FHguhaZmmGeUNCOnd5StwCT62aVtftAcpQ8IwUKo5cSS4nkeRGPMvK%2B53Ix8TcboHm4pBolPiTyFGmf1Ypuld2wQEKQ3idfsrELzUtZFM0AixWWHawQ369QING%2Fhe07zpdCySb8e1eYdHzDBqll8Q2Zefd5mQt8eoLV97C8olZbqh0v4XhOuii%2FP5lScYwY%2BUlMROt1T6zGErV%2F0yO1u7GVCN3Hm6phqjsBHD5%2B8f9%2FvQwUUJR8mSbEgcHQYJaHKezin8qmgM1NEO0E85CrbAwhBEAAaDDUwNzIyMjQwMjYxNSIMtQASAIiEbCaj5CGjKrgD7X9bcoB%2FAZMEt5PWOC0J0aqFpdA4zpWrLyIO8IKzSmtAtg9nFcmADNHRIrPZTUsvahjMBivqIsJqEGq1uGXFV3A5rpzb8NgmHT%2F%2BeXYd632Itnu8lsPzOaneBL0bSCy4mndhur1IYHVablmGM4d%2FMdHNLaVftAbnCCYlnykOdWyM2tXtBZUNELfL2qUoOTuaQIreTMz%2F%2BZUI4p5UE5Z8N8X1b6UQuW0sIQlrZTh8o5xFaRkqs4lfIg%2FGYsGRL0YPSkSC9jx87EbRehtkhtkKTIs1jm1IEkiiqT3yZK%2FlYwpaX3CbXJfpnf6ukR8mwWuYtFnHFWGeqBtmAy2YXU2OyY%2BoR3f52nqkEkRlHoVkA33biId4x9YU0gWkWHHHH7YxfgjVOUkpi4ansoWPtLryCKdWdHU49fKR%2BpRa0fojkKwAkTinvTTjiQzaJ7cpOkS6ZWZPOgNhm9Rd1zhFtZmxa1tzXBMAObz0jOI92QRatnM9%2BsnCCh%2Bj%2BrM2YR5ni64CEUdh2pCa7BK9H%2BlTIWTZCXrkzzgiZ0CBK8eMaxPZH%2F3RffvjSB5YuV0TtAdwczjNXtCfEfKsriQw7KP35AU%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190329T080958Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAXMGGPUY34V7QISO3%2F20190329%2Fap-northeast-2%2Fs3%2Faws4_request&X-Amz-Signature=9d23247ee40759a52cd5d3084f7ee0e68dfdb25449ae517ee9cedd7f9084500f\" />\n<p>navigator는 위의 그림처럼 여러개의 화면을 한 보따리에 묶어서 그 안에 있는 화면들끼리 자유롭게 이동할 수 있게 해 주는 도구이다.</p>\n<p>그렇다면 navigator는 어떤 종류가 있을까? 아래에 나오는 navigator들이 흔히 쓰이는 종류이다.</p>\n<p>첫번째로 <strong>Stack navigator</strong>가 있다. 이 navigator는 아래의 그림처럼 stack과 같이 쌓이는 구조를 갖고 있는데, 이는 화면이 화면 위에 쌓이고, back 버튼을 누르면 위에 있는 화면이 사라진다는 의미이다.\n<img src=\"https://electric-cloud.com/wp-content/uploads/use-case-graphic_full-stack-provisioning.png=100*\" /></p>\n<p>다음은 <strong>Bottom tab navigator</strong>이다. 이 navigator는 인스타그램과 같은 어플에서 많이 볼 수 있는데, 화면 하단에 고정된 탭이 생기면서 탭을 누르면 화면이동을 자유롭게 도와주는 역할을 한다.</p>\n<p>다음은 <strong>Drawer navigator</strong>이다. 이는 아래의 예와 같이 화면의 왼쪽 또는 오른쪽에 탭이 나오면서 그 안에 있는 화면에서 자유롭게 이동할 수 있는 역할을 한다.</p>\n<p>보통은 위의 navigator들을 조합하여 쓰는데 먼저 bottom tab navigator와 stack navigator를 조합해서 사용하면 다음과 같이 표현할 수 있다. 여러개의 bottom tab이 있고 각각의 tab에 stack navigator가 있는 구조이다.</p>\n<p>또 다른 경우는 Drawer navigator와 stack navigator를 조합하여 사용하는 경우이다. 이 같은 경우도 동작원리는 위와 같고 형태만 달라지는 구조이다.</p>\n<h3>Navigation의 lifecycle과 lifecycle event</h3>\n<p>사실 위의 내용보다 이 부분이 더 중요하다고 할 수 있는데, <em>navigation은 화면을 이동한다고 해서 unmount가 일어나지 않는다.</em> 이 얘기는 다시 말해서 이전에 봤었던 화면을 다시 본다고 해서 rerendering이 되지 않고, 즉 componentDidMount가 매번 실행되지 않는다는 얘기다.</p>\n<p>따라서 어떤 화면에 focus를 맞출 때마다 어떤 함수를 실행시키거나 어떤 동작을 하려면 componentDidMount에서 실행해야 하는 것이 아니라 다른 event를 이용해서 함수를 실행시켜야 한다. 그 때 사용할 수 있는 것이 lifecycle event이다.</p>\n<p>lifecycle event는 총 4가지가 있는데, focus될 때와 unfocus될 때로 나뉜다.</p>\n<p>각각 경우에 두가지 event가 있다. focus는 onWillFocus와 onDidFocus가 있다.\nonWillFocus는 이름에서 알 수 있듯이 화면에 focus가 맞춰지기 바로 전에 실행되는 event이고 onDidFocus는 focus가 맞춰진 바로 직후에 실행되는 event다.</p>\n<p>이와 반대로 onWillBlur, onDidBlur는 unfocus되기 직전과 직후 실행되는 event이다.\n예시로는 다음과 같이 사용할 수 있다.</p>\n<pre><code class=\"language-javascript\">&#x3C;NavigationEvents\n  onWillFocus={payload => console.log(\"will focus\", payload)}\n  onDidFocus={payload => console.log(\"did focus\", payload)}\n  onWillBlur={payload => console.log(\"will blur\", payload)}\n  onDidBlur={payload => console.log(\"did blur\", payload)}\n/>\n</code></pre>\n<p>이 4가지 event를 사용하면 lifecycle에 맞춰 실행하고 싶은 함수들을 사용할 수 있다.</p>","frontmatter":{"title":"React navigation: 화면전환과 구성"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reactNavigation/"}}