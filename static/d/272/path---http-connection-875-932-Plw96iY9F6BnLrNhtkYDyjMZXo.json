{"data":{"markdownRemark":{"html":"<h2>http connection between server and client</h2>\n<p><strong>이번 Sprint(채팅 웹페이지)에서 서버의 역할</strong></p>\n<ol>\n<li>메시지를 저장 - 클라이언트의 요청에 의해 서버에 저장</li>\n<li>저장된 메세지를 뿌려줌 - 요청에 대한 응답 표시</li>\n</ol>\n<p><strong>이번 Sprint에서 클라이언트의 역할</strong></p>\n<ol>\n<li>터미널의 역할을 수행</li>\n<li>사용자 입력을 주로 수행</li>\n<li>서버에 대한 응답을 화면에 표시</li>\n</ol>\n<p>전통적인 http 통신은 요청이 있어야만 응답이 있다.\n그리고 요청이 성공을 했든 실패를 했든 응답은 준다.\n발전된 http는 요청여러개에 응답여러개도 줄 수가 있다.</p>\n<p>push technollogy까지도 찾아보기</p>\n<h4>http request methods</h4>\n<ul>\n<li>GET은 정보를 가져오는 것을 요청하는 method</li>\n<li>POST는 정보를 쓰는 것을 요청하는 method</li>\n<li>PUT은 정보를 업데이트 하는 것을 요청하는 method</li>\n<li>DELETE는 정보의 삭제를 요청하는 method</li>\n</ul>\n<p><em>참고</em>: PUT과 PATCH의 차이는 PUT은 DB에 새로운 row를 추가하는 것이라면 PATCH는 row의 한 값만을 update하는 method이다.</p>\n<p>post는 payload가 담김\n400번대 에러는 클라이언트의 에러\n500번대는 서버의 잘못으로 에러</p>\n<h4>http request 확인 방법</h4>\n<ul>\n<li>특정 route에 대해서 get요청을 확인해보고 싶으면 브라우저에서 특정 endpoint로 접속해보면 get요청이 server로 가게 되고 확인할 수 있다.</li>\n<li>http 요청 테스트는 postman 이라는 tool로 확인을 할 수가 있다.</li>\n</ul>\n<p><em>fetch 사용하는 방법은 mdn 참고하기</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">https://developer.mozilla.org/en-US/docs/Web/API/Fetch<em>API/Using</em>Fetch</a></p>","frontmatter":{"title":"Http connection"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/httpConnection/"}}