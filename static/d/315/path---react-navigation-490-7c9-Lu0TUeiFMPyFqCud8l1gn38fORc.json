{"data":{"markdownRemark":{"html":"<p>react native를 통해 모바일 어플리케이션을 만들면서 react native app 화면전환에 react navigation이 가장 적합하다는 것을 깨달았고, navigation을 사용하면서 동작하는 원리에 대해 연구해봤다. React navigation을 통한 화면전환과 구성에 대해 이야기 해보자.</p>\n<h3>Naviagator</h3>\n<p>먼저 react navigation에 있는 navigator라는 개념 먼저 얘기해보려 한다.\nnavigator는 다음 그림과 같다.</p>\n<img src=\"../components/IMG_4205.png?nf_resize=fit&w=300&h=400\" />\n<p>navigator는 위의 그림처럼 여러개의 화면을 한 보따리에 묶어서 그 안에 있는 화면들끼리 자유롭게 이동할 수 있게 해 주는 도구이다.</p>\n<p>그렇다면 navigator는 어떤 종류가 있을까? 아래에 나오는 navigator들이 흔히 쓰이는 종류이다.</p>\n<p>첫번째로 <strong>Stack navigator</strong>가 있다. 이 navigator는 아래의 그림처럼 stack과 같이 쌓이는 구조를 갖고 있는데, 이는 화면이 화면 위에 쌓이고, back 버튼을 누르면 위에 있는 화면이 사라진다는 의미이다.</p>\n<p>다음은 <strong>Bottom tab navigator</strong>이다. 이 navigator는 인스타그램과 같은 어플에서 많이 볼 수 있는데, 화면 하단에 고정된 탭이 생기면서 탭을 누르면 화면이동을 자유롭게 도와주는 역할을 한다.</p>\n<p>다음은 <strong>Drawer navigator</strong>이다. 이는 아래의 예와 같이 화면의 왼쪽 또는 오른쪽에 탭이 나오면서 그 안에 있는 화면에서 자유롭게 이동할 수 있는 역할을 한다.</p>\n<p>보통은 위의 navigator들을 조합하여 쓰는데 먼저 bottom tab navigator와 stack navigator를 조합해서 사용하면 다음과 같이 표현할 수 있다. 여러개의 bottom tab이 있고 각각의 tab에 stack navigator가 있는 구조이다.</p>\n<p>또 다른 경우는 Drawer navigator와 stack navigator를 조합하여 사용하는 경우이다. 이 같은 경우도 동작원리는 위와 같고 형태만 달라지는 구조이다.</p>\n<h3>Navigation의 lifecycle과 lifecycle event</h3>\n<p>사실 위의 내용보다 이 부분이 더 중요하다고 할 수 있는데, <em>navigation은 화면을 이동한다고 해서 unmount가 일어나지 않는다.</em> 이 얘기는 다시 말해서 이전에 봤었던 화면을 다시 본다고 해서 rerendering이 되지 않고, 즉 componentDidMount가 매번 실행되지 않는다는 얘기다.</p>\n<p>따라서 어떤 화면에 focus를 맞출 때마다 어떤 함수를 실행시키거나 어떤 동작을 하려면 componentDidMount에서 실행해야 하는 것이 아니라 다른 event를 이용해서 함수를 실행시켜야 한다. 그 때 사용할 수 있는 것이 lifecycle event이다.</p>\n<p>lifecycle event는 총 4가지가 있는데, focus될 때와 unfocus될 때로 나뉜다.</p>\n<p>각각 경우에 두가지 event가 있다. focus는 onWillFocus와 onDidFocus가 있다.\nonWillFocus는 이름에서 알 수 있듯이 화면에 focus가 맞춰지기 바로 전에 실행되는 event이고 onDidFocus는 focus가 맞춰진 바로 직후에 실행되는 event다.</p>\n<p>이와 반대로 onWillBlur, onDidBlur는 unfocus되기 직전과 직후 실행되는 event이다.\n예시로는 다음과 같이 사용할 수 있다.</p>\n<pre><code class=\"language-javascript\">&#x3C;NavigationEvents\n  onWillFocus={payload => console.log(\"will focus\", payload)}\n  onDidFocus={payload => console.log(\"did focus\", payload)}\n  onWillBlur={payload => console.log(\"will blur\", payload)}\n  onDidBlur={payload => console.log(\"did blur\", payload)}\n/>\n</code></pre>\n<p>이 4가지 event를 사용하면 lifecycle에 맞춰 실행하고 싶은 함수들을 사용할 수 있다.</p>","frontmatter":{"title":"React navigation: 화면전환과 구성"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reactNavigation/"}}